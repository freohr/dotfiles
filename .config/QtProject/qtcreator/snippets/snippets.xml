<?xml version="1.0" encoding="UTF-8"?>
<snippets>
    <snippet group="C++" trigger="find_if" id="" complement="return" removed="false" modified="false">auto itr = std::find_if($collection$.cbegin(), $collection$.cend(),
                        [$capture$] (const $param:c$ $param$)
                        {
                            return $bool_cond$
                        });

return itr != $collection$.cend() ? *itr : $default$;</snippet>
    <snippet group="C++" trigger="for" id="cpp_for" complement="" removed="false" modified="true">for (int $var$ = 0; $var$ &lt; $total$; ++$var$) {
    $$
}</snippet>
    <snippet group="C++" trigger="namespace" id="cpp_namespace_with_comment" complement="with closing brace comment" removed="false" modified="true">namespace $name$ {
    $$
}  // namespace $name$</snippet>
    <snippet group="Text" trigger="aco" id="" complement="" removed="false" modified="false">add_compile_options(-D$var$=ON)</snippet>
    <snippet group="Text" trigger="cmake" id="" complement="" removed="false" modified="false">cmake_minimum_required(VERSION 3.6 FATAL_ERROR)

project($proj_name$)

set(components_SRC
    $components$)

add_library(\\${PROJECT_NAME} \\${components_SRC})

target_include_directories(\\${PROJECT_NAME} PUBLIC \\${CMAKE_CURRENT_SOURCE_DIR})</snippet>
    <snippet group="Text" trigger="log_level" id="" complement="" removed="false" modified="false">#define SPDLOG_ACTIVE_LEVEL SPDLOG_LEVEL_$level$</snippet>
    <snippet group="Text" trigger="tll" id="" complement="" removed="false" modified="false">target_link_libraries(\\${PROJECT_NAME} $visibility$ $libs$)</snippet>
    <snippet group="Text" trigger="todo" id="" complement="" removed="false" modified="false">// TODO (SFA): $text$</snippet>
</snippets>
